#! /usr/bin/env bash
#########################################################################
#									#
#	bin-deb-upl.sh is automatically generated,			#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: bin-deb-upl.sh						#
# Author: Copyright (C) 2018-2019  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0					#
#									#
# Purpose:								#
# To upload debian packages to bintray.					#
#									#
# Syntax:	bin-deb-upl.sh [ -h --help || -v --verbose ||		#
#				-V --version ]				#
#									#
# Exit Codes:	0 - success						#
#		1 - failure						#
#									#
# Further Info:								#
# This script looks for debian packages in the current directory,	#
# parses their names for package name, version and architecture, and	#
# then uploads the package to Bintray.					#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 15/10/2018	MG	1.0.1	First release.				#
# 19/10/2018	MG	1.0.2	Add newline after wget bintray message	#
#				display.				#
# 22/10/2018	MG	1.0.3	Move above new line inside end of	#
#				processing loop.			#
# 23/09/2019	MG	1.1.0	Do not hardcode outputprefix.		#
#				Use C shape for if, while, for etc	#
#				statements.				#
#				Use true booleans.			#
#				Refactor into functions.		#
#				Use printf AOT echo.			#
#									#
#########################################################################


##################
# Init variables #
##################
readonly outputprefix="$(basename $0): "
version=1.1.0				# Script version
etclocation=@sysconfdir@		# Path to etc directory
packageversion=@pkgversion@		# Package version
verbose=false


#############
# Functions #
#############

# -h --help output.
# No parameters
# No return value
usage ()
{
cat << EOF
Usage is $0 [OPTIONS]
	[OPTIONS] are:-
	-h or --help Displays usage information
	-v or --verbose verbose output
	-V or --version Displays version information
EOF
}

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr == 1
# No return value.
output()
{
	if (( !$2 )); then
		printf "%s\n" "$1"
	else
		printf "%s\n" "$1" 1>&2
	fi
}

# Standard function to tidy up and return exit code.
# Parameters - 	$1 is the exit code.
# No return value.
script_exit()
{
	exit $1
}

# Standard function to test command error and exit if non-zero.
# Parameters - 	$1 is the exit code, (normally $? from the preceeding command).
# No return value.
std_cmd_err_handler()
{
	if (( $1 )); then
		script_exit $1
	fi
}

# Standard trap exit function.
# No parameters.
# No return value.
trap_exit()
{
	local -i exit_code=$?
	local msg

	msg="Script terminating with exit code $exit_code due to trap received."
	output "$msg" 1
	script_exit $exit_code
}

# Setup trap.
trap trap_exit SIGHUP SIGINT SIGQUIT SIGTERM

# Create ~/.bintray.conf
# No parameters.
# No return value.
create_bintray_conf()
{
	printf "Creating ~/.bintray.conf, please enter the requested info\n"
	read -p "Bintray user name: " binusr
	read -p "Bintray API Key: " binapikey
	read -p "Bintray repository URL: " binrepourl
	printf "binusr=%s\n" $binusr >> ~/.bintray.conf
	std_cmd_err_handler $?
	printf "binapikey=%s\n" $binapikey >> ~/.bintray.conf
	std_cmd_err_handler $?
	printf "binrepourl=%s\n" $binrepourl >> ~/.bintray.conf
	std_cmd_err_handler $?
	# Ensure there is a new line
	printf "\n" >> ~/.bintray.conf
	std_cmd_err_handler $?
	printf "~/.bintray.conf successfully created."
}


# Read ~/.bintray.conf
# No parameters.
# Returns 0 on success, 1 on failure.
read_bintray_conf()
{
	local input=()
	local oldIFS=$IFS
	IFS="="

	exec 3<~/.bintray.conf
	while read -u3 -ra input; do
		# Ignore comment lines and blank lines.
		if [[ ${input[0]} = "#"* || ${input[0]} = "" ]]; then
			continue
		fi

		case ${input[0]} in
		binusr)
			binusr=${input[1]}
			;;
		binapikey)
			binapikey=${input[1]}
			;;
		binrepourl)
			binrepourl=${input[1]}
			;;
		*)
			output "Unrecognized field in ~/.bintray.conf" 1
			return 1
			;;
		esac
	done
	exec 3<&-

	IFS=$oldIFS
	return 0
}


# Lookup ditribution name using distribution number.
# No parameters.
# Returns 0 on success, 1 on failure.
retrieve_dist_name()
{
	local input=()
	local oldIFS=$IFS
	IFS="="
	debdistname=""

	exec 3<$etclocation/bintray-debian-upload.conf
	while read -u3 -ra input; do
		# Ignore comment lines and blank lines.
		if [[ ${input[0]} = "#"* || ${input[0]} = "" ]]; then
			continue
		fi

		if [[ ${input[0]} = $debdistnum ]]; then
			debdistname=${input[1]}
			break
		fi
	done
	exec 3<&-

	IFS=$oldIFS

	if [[ $debdistname = "" ]]; then
		output "Unrecognized Debian distribution number." 1
		return 1
	fi
	return 0
}

# Parse the filename to get package name, version string, architecture and
# debian distribution number.
# Parameters -	$1 is the Debian package filename.
# Returns 0 on success, 1 on failure.
parse_filename()
{
	local filevar=${1%".deb"}
	local elements=$(printf "%s\n" $filevar | tr "_" " ")
	local count=0
	local err=0
	local el
	pkgname=""
	pkgver=""
	debdistnum=""
	pkgarch=""

	for el in $elements; do
		case "$count" in
		0)
			pkgname=$el
			;;
		1)
			pkgver=$el
			debdistnum=${el##*b}
			debdistnum=${debdistnum%u*}
			;;
		2)
			pkgarch=$el
			;;
		*)
			err=1
			;;
		esac
		count=$((count + 1))
	done
	if [[ $pkgname == "" || $pkgver == "" || $debdistnum == "" \
		|| $pkgarch == "" || $err == 1 ]]; then
		return 1
	fi
	return 0
}

# Process command line arguments with GNU getopt.
# Parameters -	$1 is the command line.
# No return value.
proc_CL()
{
	local GETOPTTEMP
	local tmpGETOPTTEMP

	tmpGETOPTTEMP="getopt -o hvV --long help,verbose,version"
	GETOPTTEMP=$($tmpGETOPTTEMP -n "$0" -- "$@")
	std_cmd_err_handler $?

	eval set -- "$GETOPTTEMP"
	std_cmd_err_handler $?

	while true; do
		case "$1" in
		-h|--help)
			usage
			shift
			script_exit 0
			;;
		-v|--verbose)
			verbose=true
			shift
			;;
		-V|--version)
			printf "Script version %s\n" $version
			printf "Package version %s\n" $packageversion
			shift
			script_exit 0
			;;
		--)	shift
			break
			;;
		*)	output "Internal error." 1
			script_exit 1
			;;
		esac
	done

	# Script does not accept other arguments.
	if [ $# -gt 0 ]; then
		output "Invalid argument." 1
		script_exit 1
	fi
}

# Process / check config files.
# No parameters
# No return value.
proc_config()
{
	local msg

	# Check bintray-debian-upload.conf
	if [[ ! -f "$etclocation/bintray-debian-upload.conf" ]]; then
		msg="$etclocation/bintray-debian-upload.conf does not exist."
		output "$msg" 1
		script_exit 1
	fi

	# Read or create ~/.bintray.conf
	if [[ -f ~/.bintray.conf ]]; then
		read_bintray_conf
		std_cmd_err_handler $?
	else
		create_bintray_conf
	fi
}


########
# Main #
########

proc_CL "$@"

proc_config

# Process debian packages
pkgfilelist=$(ls *.deb)
std_cmd_err_handler $?

for pkgfilename in $pkgfilelist; do
	parse_filename $pkgfilename
	std_cmd_err_handler $?

	output "Attempting upload of $pkgfilename" 0

	if $verbose; then
		printf "Package is %s\n" $pkgname
		printf "Package version is %s\n" $pkgver
		printf "Debian distribution number is %s\n" $debdistnum
		printf "Arch is %s\n" $pkgarch
	fi

	retrieve_dist_name
	std_cmd_err_handler $?

	if $verbose; then
		printf "Debian ditribution name %s\n\n" $debdistname
	fi

	# Build upload command line.
	uploadCL="curl -T $pkgfilename -u$binusr:$binapikey \"$binrepourl"
	uploadCL+="/$pkgname/$pkgver/pool/stable/${pkgname:0:1}/$pkgfilename;"
	uploadCL+="deb_distribution=$debdistname;deb_component=stable;"
	uploadCL+="deb_architecture=$pkgarch;publish=1\""

	if $verbose; then
		printf "%s\n\n" $uploadCL
	fi

	eval "$uploadCL"
	std_cmd_err_handler $?
	printf "\n"
done


output "script completed." 0
script_exit 0

